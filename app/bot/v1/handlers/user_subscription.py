"""
–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ –¥–æ–ª–ª–∞—Ä–∞.
"""

import asyncio
from datetime import datetime

import pytz  # type: ignore
from aiogram import F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import default_state
from aiogram.types import (
    CallbackQuery,
    ContentType,
    LabeledPrice,
    Message,
    PreCheckoutQuery,
)

from app.bot.v1.filters.filters import IsUserCommand, IsUserSubscribed
from app.config.config import settings
from app.services.dollar_rate import DollarRateService
from app.services.user import UserService

DAY = 24 * 60 * 60
router: Router = Router()


PRICE = LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", amount=100 * 100)  # 100 —Ä—É–±.


async def _user_subscription(info: Message | CallbackQuery):
    user_tg_id: int = info.from_user.id
    if isinstance(info, CallbackQuery):
        info = info.message
    if await UserService.is_user_subscribed(user_tg_id):
        await info.answer(text="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞!")
        return
    if not await UserService.is_user_registered(user_tg_id):
        await info.answer(
            text=("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n" "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")
        )
        return
    if settings.PAYMENTS_TOKEN.split(":")[1] == "TEST":
        await info.answer(text="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ ü§ë")

    await info.answer_invoice(
        title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è",
        description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 –º–µ—Å—è—Ü",
        provider_token=settings.PAYMENTS_TOKEN,
        currency="rub",
        is_flexible=False,
        prices=[PRICE],
        start_parameter="one-month-subscription",
        payload="test-invoice-payload",
    )


@router.message(Command(commands="subscribe"), StateFilter(default_state))
async def user_subscription_command(message: Message):
    await _user_subscription(message)


@router.callback_query(IsUserCommand("subscribe"), StateFilter(default_state))
async def user_subscription(callback: CallbackQuery):
    await _user_subscription(callback)


@router.pre_checkout_query(lambda query: True)
async def pre_checkout_query(pre_checkout_q: PreCheckoutQuery):
    await pre_checkout_q.answer(ok=True)


@router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: Message):
    await message.answer(
        text=(
            "–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É "
            f"{message.successful_payment.total_amount // 100} "
            f"{message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä—å –í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –∫—É—Ä—Å–µ –¥–æ–ª–ª–∞—Ä–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
            "/begin - –Ω–∞—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"
        )
    )
    await UserService.add_subscription(message.from_user.id)


@router.message(IsUserSubscribed())
async def regular_dollar_rate(message: Message):
    while True:
        if not await UserService.is_user_subscribed(message.from_user.id):
            break
        dollar_price = await DollarRateService.get_and_save_dollar_rate(
            message.from_user.id
        )
        await message.answer(
            text=(
                f"–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞: {dollar_price} —Ä—É–±.\n"
                "–°–ª–µ–¥—É—é—â–µ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ "
                f"–≤ {datetime.now(pytz.timezone('Europe/Moscow')).strftime('%H:%M')} –ø–æ –º—Å–∫."
            )
        )

        # –∑–∞—Å—ã–ø–∞–µ–º –Ω–∞ —Å—É—Ç–∫–∏
        await asyncio.sleep(DAY)


@router.message(Command(commands="begin"))
async def user_is_not_subscribed(message: Message):
    await message.answer("–£ –í–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ üò¢\n/subscribe - –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
