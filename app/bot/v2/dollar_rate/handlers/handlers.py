from aiogram import F, Router
from aiogram.filters.command import CommandStart
from aiogram.types import (
    CallbackQuery,
    ContentType,
    LabeledPrice,
    Message,
    PreCheckoutQuery,
)
from aiogram_dialog import DialogManager, ShowMode, StartMode
from aiogram_dialog.widgets.input import ManagedTextInput
from aiogram_dialog.widgets.kbd import Button

from app.bot.v2.create_bot import BOT
from app.bot.v2.dollar_rate.state import DollarRateState
from app.config.config import settings
from app.services.dollar_rate import DollarRateService
from app.services.user import UserService

router = Router()

PRICE = LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", amount=100 * 100)  # 100 —Ä—É–±.
DAY = 24 * 60 * 60


@router.message(CommandStart())
async def start_command(message: Message, dialog_manager: DialogManager) -> None:
    await UserService.add_user(user_tg_id=message.from_user.id)
    await dialog_manager.start(state=DollarRateState.start, mode=StartMode.RESET_STACK)


async def dollar_price(
    callback: CallbackQuery,
    button: Button,
    manager: DialogManager,
) -> None:
    dollar_price = await DollarRateService.get_and_save_dollar_rate(
        callback.from_user.id
    )
    await callback.message.answer(f"–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞: {dollar_price} —Ä—É–±.")


async def dollar_history(
    callback: CallbackQuery,
    button: Button,
    manager: DialogManager,
) -> None:
    await manager.start(state=DollarRateState.history, mode=StartMode.NEW_STACK)


async def user_registry(
    callback: CallbackQuery,
    button: Button,
    manager: DialogManager,
) -> None:
    if not await UserService.is_user_registered(callback.from_user.id):
        await manager.switch_to(state=DollarRateState.registry, show_mode=ShowMode.SEND)
    else:
        await callback.message.answer(text="–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")


async def correct_fullname_handler(
    message: Message,
    widget: ManagedTextInput,
    dialog_manager: DialogManager,
    text: str,
) -> None:
    await UserService.add_user_fullname(message.from_user.id, text)
    await message.answer(
        text=(
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å –í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ "
            "–º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –∫—É—Ä—Å–µ "
            "–¥–æ–ª–ª–∞—Ä–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"
        )
    )
    await dialog_manager.start(state=DollarRateState.start)


async def error_fullname_handler(
    message: Message,
    widget: ManagedTextInput,
    dialog_manager: DialogManager,
    error: ValueError,
) -> None:
    await message.answer(
        text="–§–ò–û –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
    )
    await dialog_manager.start(state=DollarRateState.start)


async def user_subscription(
    callback: CallbackQuery,
    button: Button,
    manager: DialogManager,
) -> None:
    if await UserService.is_user_subscribed(callback.from_user.id):
        await callback.message.answer(text="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞!")
        return
    if not await UserService.is_user_registered(callback.from_user.id):
        await callback.message.answer(text=("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"))
        return
    if settings.PAYMENTS_TOKEN.split(":")[1] == "TEST":
        await callback.message.answer(text="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ ü§ë")

    await callback.message.answer_invoice(
        title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è",
        description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 –º–µ—Å—è—Ü",
        provider_token=settings.PAYMENTS_TOKEN,
        currency="rub",
        is_flexible=False,
        prices=[PRICE],
        start_parameter="one-month-subscription",
        payload="test-invoice-payload",
    )


@router.pre_checkout_query(lambda query: True)
async def pre_checkout_query(pre_checkout_q: PreCheckoutQuery) -> None:
    await pre_checkout_q.answer(ok=True)


@router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(
    message: Message,
    dialog_manager: DialogManager,
) -> None:
    await message.answer(
        text=(
            "–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É "
            f"{message.successful_payment.total_amount // 100} "
            f"{message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä—å –í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –∫—É—Ä—Å–µ –¥–æ–ª–ª–∞—Ä–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
        )
    )
    await UserService.add_subscription(message.from_user.id)
    await BOT.send_message(
        chat_id=message.chat.id, text="–ó–¥–µ—Å—å —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞!!!"
    )


# TODO –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞
# async def regular_dollar_rate(message: Message) -> None:
#     while True:
#         if not await UserService.is_user_subscribed(message.from_user.id):
#             break
#         dollar_price = await DollarRateService.get_and_save_dollar_rate(
#             message.from_user.id
#         )
#         await message.answer(
#             text=(
#                 f"–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞: {dollar_price} —Ä—É–±.\n"
#                 "–°–ª–µ–¥—É—é—â–µ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ "
#                 f"–≤ {datetime.now(pytz.timezone('Europe/Moscow')).strftime('%H:%M')} –ø–æ –º—Å–∫."
#             )
#         )

#         # –∑–∞—Å—ã–ø–∞–µ–º –Ω–∞ —Å—É—Ç–∫–∏
#         await asyncio.sleep(DAY)


BUTTON_MAPPER = {
    "dollar": dollar_price,
    "subscribe": user_subscription,
    "history": dollar_history,
    "register": user_registry,
}
